(in-package #:griefree)

;; session related codes here

(defstruct session 
  status
  id
  call-id ;; generated by twilio
  caller-ip
  outgoing-call-id
  phone-number
  record-url)

(defvar *session-table* (make-hash-table :test 'equal))

(defun new-session (&optional &key caller-ip)
  (let* ((session-id (random 9999999))
         (session (make-session :status 'new
                                :id session-id
                                :caller-ip caller-ip)))
    (setf (gethash session-id *session-table*) session)
    (session-id session)))

(defun find-session-with-call-id (call-id)
  "Find a session record by the given call id"
  (loop 
     for k being the hash-keys of *session-table*
     when (string-equal call-id (session-call-id (gethash k *session-table*)))
     do 
       (return (gethash k *session-table*))))
       
(defun find-session-with-outgoing-call-id (call-id)
  (loop 
     for k being the hash-keys of *session-table*
     when (string-equal call-id (session-outgoing-call-id (gethash k *session-table*)))
     do 
       (return (gethash k *session-table*))))

(defun get-session (session-id)
  (gethash session-id *session-table*))

(defun check-session (session-id)
  (let ((session (gethash session-id *session-table*)))
    (and session (equal (session-status session) 'new))))

(defun done-session (session-id)
  (setf (session-status (gethash session-id *session-table*)) 'done))

(defun expire-session (session-id)
  (remhash session-id *session-table*))


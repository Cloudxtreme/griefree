(in-package #:griefree)

(defun call ()
  (cl-log:log-message :log (format nil "~A" (hunchentoot:post-parameters*)))
  (with-output-to-string (s)
    (xml-emitter:with-xml-output (s)
      (xml-emitter:with-tag ("Response")
        (xml-emitter:with-tag ("Gather"
                               '(("action" "http://ec2-175-41-199-117.ap-northeast-1.compute.amazonaws.com/asf123x/session-match")
                                 ("method" "POST")))
          (xml-emitter:simple-tag "Say" "Hello, welcome to grief free service. Please input your session ID, followed by the pound sign"))))))

(defun session-match ()
  (cl-log:log-message :log (format nil "~A" (hunchentoot:post-parameters*)))
  (let ((session-id (parse-integer (hunchentoot:post-parameter "Digits") :junk-allowed t)))
    (if (check-session session-id)
        (progn 
          (done-session session-id)
          (setf (session-call-id (get-session session-id))
                (hunchentoot:post-parameter "CallSid"))
          (with-output-to-string (s)
            (xml-emitter:with-xml-output (s)
              (xml-emitter:with-tag ("Response")
                (xml-emitter:simple-tag "Say" "Please say your message after beep")
                (xml-emitter:with-tag ("Record" 
                                       '(("action"  "http://ec2-175-41-199-117.ap-northeast-1.compute.amazonaws.com/asf123x/receive-call")
                                         ("method"  "POST")
                                         ("maxLength"  "20")
                                         ("finishOnKey"  "#"))))))))
        (with-output-to-string (s)
          (xml-emitter:with-xml-output (s)
            (xml-emitter:with-tag ("Response")
              (xml-emitter:simple-tag "Say" "Sorry, the session ID can not be found")))))))
                                   

(defun receive-call ()
  (cl-log:log-message :log (format nil "~A" (hunchentoot:post-parameters*)))
  (let ((session (find-session-with-call-id (hunchentoot:post-parameter "CallSid"))))
    (setf (session-record-url session) (hunchentoot:post-parameter "RecordingUrl"))
    (with-output-to-string (s)
      (xml-emitter:with-xml-output (s)
        (xml-emitter:with-tag ("Response")
          (xml-emitter:simple-tag "Say" "Thank you for your message. Please listen it in your browser."))))))

(defun place-call-cb ()
  (cl-log:log-message :log (format nil "~A" (hunchentoot:post-parameters*)))
  (let ((session (find-session-with-outgoing-call-id (hunchentoot:post-parameter "CallSid"))))
    (with-output-to-string (s)
      (xml-emitter:with-xml-output (s)
        (xml-emitter:with-tag ("Response")
          (xml-emitter:simple-tag "Say" "The following message is recorded for a user to you.")
          (xml-emitter:simple-tag "Play" (session-record-url session)))))))
